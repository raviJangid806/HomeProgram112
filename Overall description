The Book Store project is a comprehensive e-commerce application designed to facilitate seamless interactions between admins, shop owners, and customers. It offers a robust platform where customers can browse and purchase books, owners can manage their shops and inventory, and admins oversee the entire system. Key features include product management with bulk upload via CSV, cart operations stored in cookies or the database based on user login, order processing with PDF invoice generation and email notifications, and role-based access control for enhanced security. Built using Java, Spring Boot, MySQL, and a user-friendly frontend with HTML, CSS, Thymeleaf, and Bootstrap, the system ensures scalability, reliability, and an intuitive experience for all stakeholders.


Need for a New System

The new system is essential to address the inefficiencies and limitations of the existing setup. It provides a centralized platform where admins, shop owners, and customers can interact seamlessly, improving operational efficiency and user satisfaction. The new system automates inventory management, streamlines order processing, and integrates features like bulk product uploads, email notifications, and PDF invoice generation. It ensures data consistency by synchronizing user data across devices and offers enhanced security with role-based access control. Additionally, it supports scalability, making it adaptable to a growing user base and product catalog. By adopting the new system, businesses can modernize their operations, reduce manual errors, and deliver a superior shopping experience to customers.

Overall Description

In the current era of digital transformation, the book retail industry faces numerous challenges in meeting the expectations of modern customers. Imagine a shop owner managing inventory with pen and paper, struggling to keep track of stock, and missing out on potential sales due to outdated practices. Customers, on the other hand, wish for a seamless shopping experience where they can browse, compare, and purchase books from the comfort of their homes. Admins lack the tools to monitor and oversee the entire ecosystem, making the process inefficient and fragmented.

The Book Store System emerges as a solution to these problems, offering a digital platform that revolutionizes the way books are bought and sold. This new system is not just another e-commerce application; it is a collaborative environment where three key roles—admins, shop owners, and customers—interact seamlessly.

The journey begins with the customer, who can effortlessly browse a wide variety of books without needing to log in. With detailed book descriptions, pricing, and discounts clearly displayed, the customer can make informed decisions. They can add books to their cart, update quantities, or remove items—all while their cart is securely managed using cookies. When the customer decides to place an order, they are prompted to log in or sign up, ensuring their order history is saved and accessible across devices. Once an order is placed, the system generates a professional PDF invoice and sends it to the customer via email, adding a touch of personalization and reliability.

For shop owners, the system becomes a powerful tool to manage their products efficiently. Instead of manually updating stock, owners can upload bulk data using CSV files, saving time and reducing errors. They can monitor their inventory in real-time, ensuring they never miss out on opportunities to meet customer demand. The system empowers them to focus on providing quality books rather than wrestling with administrative tasks.

The admin, the backbone of the system, oversees everything. Admins manage shop owners, customers, and products through a centralized interface. They ensure that shop owners adhere to policies and maintain quality standards. From resolving disputes to adding new features, the admin's role is crucial in maintaining harmony and efficiency within the ecosystem.

Built with cutting-edge technologies like Java 21/23, Spring Boot, MySQL, HTML, CSS, jQuery, Thymeleaf, and Bootstrap, the system ensures high performance, scalability, and user-friendly interfaces. It is not just a digital storefront but a complete solution designed to cater to the unique needs of admins, shop owners, and customers alike.

The Book Store System is more than just software; it’s a transformation. It replaces outdated practices with automation, security, and innovation. It brings shop owners closer to customers while giving admins the tools they need to ensure a seamless operation. With this system, the book-selling process becomes a modern, efficient, and delightful experience for everyone involved.

Program and DBMS

The Book Store System is built using a modern technology stack that ensures scalability, performance, and maintainability. The choice of programming languages and tools is tailored to meet the requirements of the system's functionalities and ensure smooth interactions between users, shop owners, and admins.


---

Program Details

1. Backend Development

Language: Java (Version 21/23)

Framework: Spring Boot

Used for building REST APIs to manage user authentication, product inventory, cart operations, and order processing.


Libraries:

Spring Security: Role-based access for Admin, Shop Owner, and Customer.

JPA/Hibernate: For ORM (Object-Relational Mapping).

JavaMailSender: For email notifications (PDF invoices).




2. Frontend Development

Languages: HTML, CSS, JavaScript

Frameworks/Libraries:

Thymeleaf: Server-side rendering for dynamic pages.

Bootstrap: Ensures responsive and modern UI design.

jQuery: Simplifies client-side scripting for cart operations and AJAX requests.




3. Program Features:

RESTful endpoints for CRUD operations (Add, Update, Delete) on products, users, and orders.

CSV file upload for bulk product management by shop owners.

Cookies for cart operations (guest users) and database for logged-in users.

PDF generation using iText for invoices.





---

Database Management System (DBMS)

1. Database: MySQL

Chosen for its scalability, reliability, and ease of use in managing relational data.



2. Schema Design:

Users Table: Stores information about admins, shop owners, and customers.

Columns: user_id, username, password, role, email, phone_number.


Products Table: Manages the inventory of books.

Columns: product_id, title, author, price, discount, stock.


Cart Table: Tracks items in customers’ carts.

Columns: cart_id, user_id, product_id, quantity.


Orders Table: Records order history and details.

Columns: order_id, user_id, order_date, total_amount, status.


Order Details Table: Links orders with purchased products.

Columns: order_detail_id, order_id, product_id, quantity, price.




3. Key Features of DBMS:

Primary Keys: To uniquely identify records in each table.

Foreign Keys: For relationships between tables, ensuring referential integrity.

Indexes: For faster querying on commonly searched fields like product_id and order_id.

Transactions: To ensure atomicity during critical operations such as placing orders or updating inventory.





---

Integration

The system uses Spring Data JPA to interact with the MySQL database, ensuring efficient data manipulation with minimal boilerplate code. This approach simplifies querying and leverages advanced features like caching and batch processing for performance optimization.

This combination of programming and DBMS ensures a secure, scalable, and user-friendly system for the Book Store application.


Drawbacks of the Existing System

1. Lack of Centralization: The existing system is fragmented, with no unified platform to manage books, customers, shop owners, and admins efficiently.


2. Manual Inventory Management: Shop owners rely on manual processes for tracking stock and orders, leading to frequent errors and inefficiencies.


3. No Online Shopping Experience: Customers cannot browse, compare, or purchase books online, limiting accessibility and convenience.


4. Absence of Bulk Management: There is no functionality for bulk uploading or updating product data, making inventory management time-consuming.


5. Limited Order Management: There is no systematic way to track or process orders, leading to delays and mismanagement.


6. No Notifications or Invoices: Customers and shop owners lack automated notifications for order confirmation, and invoices are not generated systematically.


7. Data Inconsistency: Without a centralized database, data synchronization across devices is not possible, causing inconsistencies in cart and order data.


8. Lack of Security: The absence of role-based access control increases the risk of unauthorized access and data breaches.


9. No Scalability: The existing system cannot handle increasing numbers of users, products, or orders, limiting growth potential.


10. Time-Consuming and Error-Prone: Manual operations in the existing system lead to delays, errors, and inefficiencies in managing shops and customer orders.


